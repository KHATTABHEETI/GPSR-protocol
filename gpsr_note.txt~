1 gpsr 协议怎样建立sinklist ？ 1 startSink函数将自己的放入 2 recvQuery 将请求的数据包放入
2 何时调用recvQuery函数  ？ 在recv函数调用 根据数据包gpsr的type字段是否GPSRTYPE_QUERY 调用 
3 什么时候发送GPSRTYPE_QUERY数据包 ？ 通过query函数发送 
4 query函数何时被调用？  	1 创建sink节点失败 2 请求数据包超时 3 	   
5 gpsr 计时器怎样工作 ？
6 要发送的id不再sinklist上 如何工作？ 
7 query函数需要查询sinlist_上查询节点的坐标 当节点不再sinklist上 注销数据包 ，但该函数不是应该由id请求得到坐标和路径的吗？   

小结和猜想：
	gpsr协议没哟记录任何的路径 靠对方的坐标 通过最短路径计算发送 

8 gpsr的sinklist如何得到对方的坐标 

猜想： 
       query有返回查询结果的功能 关键是send函数
9 gpsr协议没有send函数的实现的 ？ 

小结与猜想：
	gpsr只有在源节点才能够填写数据包中gpsr_data信息 该信息为源节点的坐标和目标节点的坐标 
10 节点时在移动的， 那么源节点发的数据包的中的目的节点的位置信息会改变 那么怎么能够发送的目的节点呢？
猜想： 数据包要到达目的节点 是靠节点id的 只要目的节点没有离开原来位置的接受无线的范围 （无线传输时一个圆形的区域 不是线状）


11 
   小结与猜想：
   仿真场景的中先要载入场景然后才initial_node_pos ， 不然nam的时候会出现“your tracefile format older than 10a” 之类的字样

12 仿真得到的数据包的收发结果:
33 --> 45 
  send packet : 94
  receive packet : 94
  drop  packet : 0
  total packet : 188
 41 --> 50 
  send packet : 97
  receive packet : 51
  drop  packet : 0
  total packet : 148
 52 --> 2 
  send packet : 93
  receive packet : 49
  drop  packet : 0
  total packet : 142
 7 --> 13 
  send packet : 51
  receive packet : 51
  drop  packet : 0
  total packet : 102
 9 --> 25 
  send packet : 50
  receive packet : 50
  drop  packet : 0
  total packet : 100


gpsr.cc-GPSRAgent::recvQuery(Packet *p){
gpsr.cc-  struct hdr_cmn *cmh = HDR_CMN(p);
gpsr.cc-  struct hdr_ip *iph = HDR_IP(p);
gpsr.cc-  struct hdr_gpsr_query *gqh = HDR_GPSR_QUERY(p);
gpsr.cc-  
gpsr.cc:  if(sink_list_->new_sink(iph->saddr(), gqh->x_, gqh->y_, 
gpsr.cc-			  cmh->last_hop_, 1+gqh->hops_, gqh->seqno_))
gpsr.cc-    query(iph->saddr());
gpsr.cc-  //  trace("%d recv Query from %d ", my_id_, iph->saddr());  
gpsr.cc-}
gpsr.cc-

2. 通过recv函数
gpsr.cc-    switch(gh->type_){
gpsr.cc-    case GPSRTYPE_HELLO:
gpsr.cc-      recvHello(p);
gpsr.cc-      break;
gpsr.cc-    case GPSRTYPE_QUERY:
gpsr.cc:      recvQuery(p);
gpsr.cc-      break;
gpsr.cc-    default:
gpsr.cc-      printf("Error with gf packet type.\n");
gpsr.cc-      exit(1);
gpsr.cc-    }
gpsr.cc-  a_->hellotout();
gpsr.cc-}
gpsr.cc-
gpsr.cc-void
gpsr.cc-GPSRQueryTimer::expire(Event *e){
gpsr.cc:  a_->querytout();
gpsr.cc-}
gpsr.cc-
gpsr.cc-void
gpsr.cc-GPSRAgent::hellotout(){
gpsr.cc-	getLoc();
--
gpsr.cc-}
gpsr.cc-
gpsr.cc-void
gpsr.cc-GPSRAgent::startSink(){
gpsr.cc-  if(sink_list_->new_sink(my_id_, my_x_, my_y_, 
gpsr.cc:			  my_id_, 0, query_counter_))
gpsr.cc:    querytout();
gpsr.cc-}
gpsr.cc-
gpsr.cc-void
gpsr.cc-GPSRAgent::startSink(double gp){
gpsr.cc:  query_period_ = gp;
gpsr.cc-  startSink();
gpsr.cc-}
gpsr.cc-
gpsr.cc-void
gpsr.cc:GPSRAgent::querytout(){
gpsr.cc:  query(my_id_);
gpsr.cc:  query_counter_++;
gpsr.cc:  query_timer_.resched(query_period_);
gpsr.cc-}
gpsr.cc-
gpsr.cc-void
gpsr.cc-GPSRAgent::getLoc(){
gpsr.cc-  GetLocation(&my_x_, &my_y_);
--

gpsr.cc-void
gpsr.cc:GPSRAgent::query(nsaddr_t id){
gpsr.cc-  if(my_id_ < 0) return;
gpsr.cc-
gpsr.cc-  Packet *p = allocpkt();
gpsr.cc-
gpsr.cc-  struct hdr_cmn *cmh = HDR_CMN(p);
gpsr.cc-  struct hdr_ip *iph = HDR_IP(p);
gpsr.cc:  struct hdr_gpsr_query *gqh = HDR_GPSR_QUERY(p);
gpsr.cc-
gpsr.cc-  cmh->next_hop_ = IP_BROADCAST;
gpsr.cc-  cmh->last_hop_ = my_id_;
gpsr.cc-  cmh->addr_type_ = NS_AF_INET;
gpsr.cc-  cmh->ptype() = PT_GPSR;
--
gpsr.cc-  }else {
gpsr.cc-    Packet::free(p);
gpsr.cc-    return;
gpsr.cc-  }
gpsr.cc-  gqh->ts_ = (float)GPSR_CURRENT;
gpsr.cc:  gqh->seqno_ = query_counter_;
gpsr.cc-
gpsr.cc-  send(p, 0);
gpsr.cc-}
gpsr.cc-
gpsr.cc-void
--
gpsr.cc-
gpsr.cc-void
gpsr.cc-GPSRAgent::recvQuery(Packet *p){
gpsr.cc-  struct hdr_cmn *cmh = HDR_CMN(p);
gpsr.cc-  struct hdr_ip *iph = HDR_IP(p);
gpsr.cc:  struct hdr_gpsr_query *gqh = HDR_GPSR_QUERY(p);
gpsr.cc-  
gpsr.cc-  if(sink_list_->new_sink(iph->saddr(), gqh->x_, gqh->y_, 
gpsr.cc-			  cmh->last_hop_, 1+gqh->hops_, gqh->seqno_))
gpsr.cc:    query(iph->saddr());
gpsr.cc-  //  trace("%d recv Query from %d ", my_id_, iph->saddr());  
gpsr.cc-}
gpsr.cc-
gpsr.cc-void
gpsr.cc-GPSRAgent::sinkRecv(Packet *p){
